package com.naehas.genie.mapper.file;

import com.naehas.genie.dto.request.file.FileRequestDTO;
import com.naehas.genie.dto.response.file.FileResponseDTO;
import com.naehas.genie.entity.File;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Mappings;
import org.mapstruct.factory.Mappers;

/**
 * 
 * <p>
 * 	Custom mapper for copying data among different file DTOs implemented using {@code MapStruct}.
 * </p>
 * 
 * <p>
 * 	This is just an interface layer. 
 * 	Implementation class is automatically generated by {@code MapStruct} when build is created before starting the server.
 * </p>
 * 
 * @author 	Piyush Kapoor
 * @since	15 April,2024
 *
 */
@Mapper(componentModel = "spring")
public interface FileMapper {
	
	/**
	 * Instance of {@code UserMapper} using which methods of this interface can be accessed in other mappers.
	 */
	FileMapper INSTANCE = Mappers.getMapper(FileMapper.class);
	

	File mapToFile(FileRequestDTO fileRequestDTO);

	default File mapToFile(FileRequestDTO fileRequestDTO,
						   Long createdBy) {

		File file = this.mapToFile(fileRequestDTO);
		file.setCreatedBy(createdBy);
		file.setUpdatedBy(createdBy);
		return file;
	}

	@Mappings({
			@Mapping(source = "createdBy", target = "createdBy.id"),
			@Mapping(source = "parentFile.id", target = "parentFileId")
	})
	FileResponseDTO mapToNewFileResponseDto(File file);

	/**
	 * Maps properties/fields from
	 * {@link com.naehas.genie.entity.File File}
	 * 		to
	 * {@link FileResponseDTO NewFileResponseDTO}.
	 *
	 * @param 	file
	 * 			Source {@code File} object from which properties will be copied.
	 *
	 * @return	{@code NewFileResponseDTO} object with initialized properties.
	 */
	default FileResponseDTO mapToNewFileResponseDTO(File file) {

		FileResponseDTO fileResponseDTO = this.mapToNewFileResponseDto(file);

		return fileResponseDTO;
	}
}
